###
# simple GraphQL request
# notice "pseudo header" X-REQUEST-TYPE: GraphQL
#   REST client ext. helps us to build GraphQL req. body
#
POST http://0.0.0.0:8000/graphql
Content-Type: application/json
Authorization: Bearer xxx
X-REQUEST-TYPE: GraphQL

{ 
  helloWorld
}

###
# curl 'http://127.0.0.1:8000/graphql' \
#   -H 'content-type: application/json' \
#   --data-raw '{"query":"query MyQuery {\n  minus(a: 100, b: 10)\n}","operationName":"MyQuery","extensions":{}}'
POST http://127.0.0.1:8000/graphql
content-type: application/json
X-REQUEST-TYPE: GraphQL

query MyQuery($a: Int!, $b: Int!) {
  minus(a: $a, b: $b)
  helloWorld
}

{ "a": 200, "b": 100 }


###
# simple request
#   no "body builder used" - actual request
#
POST http://0.0.0.0:8000/graphql
Content-Type: application/json
Authorization: Bearer xxx

{ 
  "query": "{ helloWorld }"
}

###
#
# VSCODE Ctrl-Shift-P: Rest Client: Copy request as cURL
#


# curl --request POST \
#   --url http://0.0.0.0:8000/graphql \
#   --header 'content-type: application/json' \
#   --header 'user-agent: vscode-restclient' \
#   --data '{"query": "{ helloWorld }"}'

POST http://0.0.0.0:8000/graphql
Content-Type: application/json

{ 
  "query": "{ helloWorld }"
}

###
#
# one may also use Chrome Dev Tools / Network / Copy as CURL to start
#
# curl 'http://0.0.0.0:8000/graphql' \
#   -H 'Accept-Language: en-US,en' \
#   -H 'Cache-Control: no-cache' \
#   -H 'Connection: keep-alive' \
#   -H 'Origin: http://0.0.0.0:8000' \
#   -H 'Pragma: no-cache' \
#   -H 'Referer: http://0.0.0.0:8000/graphql?query=%7B+%0A++helloWorld%0A%7D' \
#   -H 'Sec-GPC: 1' \
#   -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36' \
#   -H 'accept: application/graphql-response+json, application/json, multipart/mixed' \
#   -H 'content-type: application/json' \
#   --data-raw '{"query":"{\n  helloWorld\n}","extensions":{}}' \
#   --compressed \
#   --insecure

#
# and translate to REST CLIENT "code": 
#

POST http://0.0.0.0:8000/graphql
Content-Type: application/json

{ 
  "query": "{ helloWorld }"
}

###
#
# queries often include ARGUMENTS
#    they may come hardcoded
#
POST http://0.0.0.0:8000/graphql
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

{
  hello(name: "Universe")
}

###
#
# GraphQL ARGUMENTS are often feeded from VARIABLES
#
# @name hello
POST http://0.0.0.0:8000/graphql
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

query hello($name: String!) {
  hello(name: $name)
}

{
  "name": "World1"
}

###
#
# GraphQL results might be acessed in REST client also later:
#
@greeting = {{hello.response.body.data.hello}}

POST https://httpbin.org/post
Content-Type: application/json

{"greeting_was": "{{greeting}}"}


###
#
# Place to copy from Chrome ext. 
#
POST http://127.0.0.1:8000/graphql
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

query MyQuery {
  helloWorld
  sum2(a: 10, b: 10)
  hello(name: "aaa")
}